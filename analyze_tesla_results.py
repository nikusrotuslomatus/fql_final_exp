#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –Ω–∞ Tesla T4
"""

import os
import sys
import json
import pandas as pd
import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns

def parse_csv_logs(results_dir):
    """–ü–∞—Ä—Å–∏—Ç CSV –ª–æ–≥–∏ –∏–∑ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    results_dir = Path(results_dir)
    
    all_data = []
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö CSV —Ñ–∞–π–ª–æ–≤
    for exp_dir in results_dir.glob("exp/fql/*/"):
        if exp_dir.is_dir():
            eval_csv = exp_dir / "eval.csv"
            train_csv = exp_dir / "train.csv"
            
            if eval_csv.exists():
                try:
                    df = pd.read_csv(eval_csv)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—É—Ç–∏
                    parts = exp_dir.name.split('_')
                    if len(parts) >= 3:
                        config_type = parts[-2]  # baseline –∏–ª–∏ kl_awfm
                        seed = parts[-1]
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É –ø–æ –ª–æ–≥–∞–º
                        if "antmaze" in str(exp_dir):
                            env_name = "antmaze-large-play-v2"
                        elif "puzzle" in str(exp_dir):
                            env_name = "puzzle-3x3-play-singletask-v0"
                        else:
                            env_name = "unknown"
                        
                        df['config'] = config_type
                        df['seed'] = seed
                        df['environment'] = env_name
                        
                        all_data.append(df)
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {eval_csv}: {e}")
    
    if all_data:
        combined_df = pd.concat(all_data, ignore_index=True)
        return combined_df
    else:
        return None

def analyze_performance(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º"""
    if df is None or df.empty:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print("üìä –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ä–µ–¥–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for env in df['environment'].unique():
        env_data = df[df['environment'] == env]
        print(f"\nüéØ –°—Ä–µ–¥–∞: {env}")
        print("-" * 30)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        final_scores = env_data.groupby(['config', 'seed']).tail(1)
        
        if 'eval/return' in final_scores.columns:
            score_col = 'eval/return'
        elif 'return' in final_scores.columns:
            score_col = 'return'
        else:
            print("  ‚ùå –ö–æ–ª–æ–Ω–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            continue
        
        summary = final_scores.groupby('config')[score_col].agg(['mean', 'std', 'count'])
        
        for config in summary.index:
            mean_score = summary.loc[config, 'mean']
            std_score = summary.loc[config, 'std']
            count = summary.loc[config, 'count']
            
            print(f"  {config:12s}: {mean_score:6.1f} ¬± {std_score:4.1f} ({count} —Å–∏–¥–æ–≤)")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        if len(summary) >= 2:
            configs = list(summary.index)
            if 'baseline' in configs and 'kl_awfm' in configs:
                baseline_mean = summary.loc['baseline', 'mean']
                kl_awfm_mean = summary.loc['kl_awfm', 'mean']
                improvement = ((kl_awfm_mean - baseline_mean) / baseline_mean) * 100
                
                if improvement > 0:
                    print(f"  üü¢ –£–ª—É—á—à–µ–Ω–∏–µ KL+AWFM: +{improvement:.1f}%")
                else:
                    print(f"  üî¥ –£—Ö—É–¥—à–µ–Ω–∏–µ KL+AWFM: {improvement:.1f}%")

def create_performance_plots(df, output_dir):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if df is None or df.empty:
        return
    
    output_dir = Path(output_dir)
    output_dir.mkdir(exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
    plt.style.use('seaborn-v0_8')
    sns.set_palette("husl")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    if 'eval/return' in df.columns:
        score_col = 'eval/return'
    elif 'return' in df.columns:
        score_col = 'return'
    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
        return
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ö—Ä–∏–≤—ã–µ –æ–±—É—á–µ–Ω–∏—è
    fig, axes = plt.subplots(1, 2, figsize=(15, 6))
    
    environments = df['environment'].unique()
    
    for i, env in enumerate(environments):
        if i >= 2:  # –¢–æ–ª—å–∫–æ 2 –≥—Ä–∞—Ñ–∏–∫–∞
            break
            
        env_data = df[df['environment'] == env]
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for config in env_data['config'].unique():
            config_data = env_data[env_data['config'] == config]
            
            # –°—Ä–µ–¥–Ω–µ–µ –ø–æ —Å–∏–¥–∞–º
            if 'step' in config_data.columns:
                step_col = 'step'
            elif 'epoch' in config_data.columns:
                step_col = 'epoch'
            else:
                step_col = config_data.columns[0]
            
            mean_curve = config_data.groupby(step_col)[score_col].mean()
            std_curve = config_data.groupby(step_col)[score_col].std()
            
            axes[i].plot(mean_curve.index, mean_curve.values, 
                        label=f'{config}', linewidth=2)
            axes[i].fill_between(mean_curve.index, 
                               mean_curve.values - std_curve.values,
                               mean_curve.values + std_curve.values,
                               alpha=0.2)
        
        axes[i].set_title(f'{env.replace("-", " ").title()}')
        axes[i].set_xlabel('–®–∞–≥–∏ –æ–±—É—á–µ–Ω–∏—è')
        axes[i].set_ylabel('–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç')
        axes[i].legend()
        axes[i].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig(output_dir / 'learning_curves.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    fig, ax = plt.subplots(figsize=(10, 6))
    
    final_scores = df.groupby(['environment', 'config', 'seed']).tail(1)
    
    # Box plot
    sns.boxplot(data=final_scores, x='environment', y=score_col, hue='config', ax=ax)
    ax.set_title('–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º')
    ax.set_xlabel('–°—Ä–µ–¥–∞')
    ax.set_ylabel('–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(output_dir / 'final_performance.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"üìà –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")

def generate_report(df, results_dir):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
    report_path = Path(results_dir) / "tesla_t4_report.md"
    
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write("# –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö Tesla T4 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤\n\n")
        
        f.write("## –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è\n")
        f.write("- GPU: Tesla T4 16GB\n")
        f.write("- Batch size: 1024\n")
        f.write("- –®–∞–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è: 200,000\n")
        f.write("- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: (512, 512, 512, 512)\n\n")
        
        if df is not None and not df.empty:
            f.write("## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ä–µ–¥–∞–º\n\n")
            
            for env in df['environment'].unique():
                env_data = df[df['environment'] == env]
                f.write(f"### {env}\n\n")
                
                # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                final_scores = env_data.groupby(['config', 'seed']).tail(1)
                
                if 'eval/return' in final_scores.columns:
                    score_col = 'eval/return'
                elif 'return' in final_scores.columns:
                    score_col = 'return'
                else:
                    continue
                
                summary = final_scores.groupby('config')[score_col].agg(['mean', 'std', 'count'])
                
                f.write("| –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è | –°—Ä–µ–¥–Ω–µ–µ | –°—Ç–¥. –æ—Ç–∫–ª. | –°–∏–¥—ã |\n")
                f.write("|--------------|---------|------------|------|\n")
                
                for config in summary.index:
                    mean_score = summary.loc[config, 'mean']
                    std_score = summary.loc[config, 'std']
                    count = summary.loc[config, 'count']
                    f.write(f"| {config} | {mean_score:.1f} | {std_score:.1f} | {count} |\n")
                
                f.write("\n")
        
        f.write("## –ì—Ä–∞—Ñ–∏–∫–∏\n\n")
        f.write("- `learning_curves.png` - –ö—Ä–∏–≤—ã–µ –æ–±—É—á–µ–Ω–∏—è\n")
        f.write("- `final_performance.png` - –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n")
        
        f.write("## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n")
        f.write("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é GPU —Å –ø–æ–º–æ—â—å—é `python monitor_gpu.py analyze`\n")
        f.write("2. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å batch_size –¥–æ 1536\n")
        f.write("3. –î–ª—è –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —É–≤–µ–ª–∏—á—å—Ç–µ offline_steps –¥–æ 300,000\n")
    
    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")

def main():
    if len(sys.argv) < 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python analyze_tesla_results.py <results_directory>")
        sys.exit(1)
    
    results_dir = sys.argv[1]
    
    if not os.path.exists(results_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {results_dir}")
        sys.exit(1)
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤: {results_dir}")
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    df = parse_csv_logs(results_dir)
    
    if df is None:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã CSV —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
        sys.exit(1)
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    analyze_performance(df)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    plots_dir = Path(results_dir) / "plots"
    create_performance_plots(df, plots_dir)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_report(df, results_dir)
    
    print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {results_dir}")

if __name__ == "__main__":
    main() 