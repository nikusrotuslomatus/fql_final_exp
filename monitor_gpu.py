#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GPU –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è FQL
"""

import time
import subprocess
import json
import os
from datetime import datetime

def get_gpu_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU"""
    try:
        result = subprocess.run([
            'nvidia-smi', 
            '--query-gpu=utilization.gpu,memory.used,memory.total,temperature.gpu,power.draw',
            '--format=csv,noheader,nounits'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            gpu_info = []
            for i, line in enumerate(lines):
                parts = line.split(', ')
                if len(parts) >= 5:
                    gpu_info.append({
                        'gpu_id': i,
                        'utilization': int(parts[0]),
                        'memory_used': int(parts[1]),
                        'memory_total': int(parts[2]),
                        'temperature': int(parts[3]),
                        'power_draw': float(parts[4]) if parts[4] != '[Not Supported]' else 0
                    })
            return gpu_info
        else:
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GPU: {e}")
        return None

def monitor_training(log_file="gpu_monitor.log", interval=30):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GPU –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è"""
    print("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ GPU...")
    print(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {log_file}")
    print(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {interval} —Å–µ–∫—É–Ω–¥")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("-" * 50)
    
    with open(log_file, 'w') as f:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ CSV
        f.write("timestamp,gpu_id,utilization,memory_used,memory_total,memory_percent,temperature,power_draw\n")
        
        try:
            while True:
                gpu_info = get_gpu_info()
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                
                if gpu_info:
                    for gpu in gpu_info:
                        memory_percent = (gpu['memory_used'] / gpu['memory_total']) * 100
                        
                        # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
                        f.write(f"{timestamp},{gpu['gpu_id']},{gpu['utilization']},"
                               f"{gpu['memory_used']},{gpu['memory_total']},{memory_percent:.1f},"
                               f"{gpu['temperature']},{gpu['power_draw']}\n")
                        f.flush()
                        
                        # –í—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω
                        print(f"GPU {gpu['gpu_id']}: "
                              f"Util={gpu['utilization']:2d}% "
                              f"Mem={memory_percent:4.1f}% "
                              f"Temp={gpu['temperature']:2d}¬∞C "
                              f"Power={gpu['power_draw']:4.1f}W")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU")
                
                print(f"[{timestamp}] –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {interval}—Å...")
                print("-" * 50)
                time.sleep(interval)
                
        except KeyboardInterrupt:
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def analyze_gpu_log(log_file="gpu_monitor.log"):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥ GPU"""
    if not os.path.exists(log_file):
        print(f"‚ùå –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")
        return
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑ GPU –ª–æ–≥–∞: {log_file}")
    print("=" * 50)
    
    with open(log_file, 'r') as f:
        lines = f.readlines()[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    
    if not lines:
        print("‚ùå –õ–æ–≥ –ø—É—Å—Ç")
        return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    gpu_data = {}
    for line in lines:
        parts = line.strip().split(',')
        if len(parts) >= 8:
            gpu_id = int(parts[1])
            utilization = int(parts[2])
            memory_percent = float(parts[5])
            temperature = int(parts[6])
            power_draw = float(parts[7])
            
            if gpu_id not in gpu_data:
                gpu_data[gpu_id] = {
                    'utilization': [],
                    'memory_percent': [],
                    'temperature': [],
                    'power_draw': []
                }
            
            gpu_data[gpu_id]['utilization'].append(utilization)
            gpu_data[gpu_id]['memory_percent'].append(memory_percent)
            gpu_data[gpu_id]['temperature'].append(temperature)
            gpu_data[gpu_id]['power_draw'].append(power_draw)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    for gpu_id, data in gpu_data.items():
        print(f"\nüéØ GPU {gpu_id} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        
        util_avg = sum(data['utilization']) / len(data['utilization'])
        util_max = max(data['utilization'])
        util_min = min(data['utilization'])
        
        mem_avg = sum(data['memory_percent']) / len(data['memory_percent'])
        mem_max = max(data['memory_percent'])
        
        temp_avg = sum(data['temperature']) / len(data['temperature'])
        temp_max = max(data['temperature'])
        
        power_avg = sum(data['power_draw']) / len(data['power_draw'])
        power_max = max(data['power_draw'])
        
        print(f"  –£—Ç–∏–ª–∏–∑–∞—Ü–∏—è: {util_avg:.1f}% (–º–∏–Ω: {util_min}%, –º–∞–∫—Å: {util_max}%)")
        print(f"  –ü–∞–º—è—Ç—å: {mem_avg:.1f}% (–º–∞–∫—Å: {mem_max:.1f}%)")
        print(f"  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_avg:.1f}¬∞C (–º–∞–∫—Å: {temp_max}¬∞C)")
        print(f"  –ú–æ—â–Ω–æ—Å—Ç—å: {power_avg:.1f}W (–º–∞–∫—Å: {power_max:.1f}W)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è GPU {gpu_id}:")
        if util_avg < 50:
            print("  ‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è GPU! –£–≤–µ–ª–∏—á—å—Ç–µ batch_size")
        elif util_avg > 90:
            print("  ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è GPU!")
        else:
            print("  üü° –£–º–µ—Ä–µ–Ω–Ω–∞—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è GPU, –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å batch_size")
        
        if mem_avg < 50:
            print("  üíæ –ú–Ω–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏, –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏")
        elif mem_avg > 90:
            print("  ‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏, –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å batch_size")
        
        if temp_avg > 80:
            print("  üå°Ô∏è  –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ")

def get_optimal_batch_size():
    """–ü–æ–¥–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π batch_size –¥–ª—è —Ç–µ–∫—É—â–µ–π GPU"""
    print("üîß –ü–æ–¥–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ batch_size...")
    
    gpu_info = get_gpu_info()
    if not gpu_info:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU")
        return
    
    for gpu in gpu_info:
        memory_gb = gpu['memory_total'] / 1024  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ GB
        
        print(f"\nGPU {gpu['gpu_id']}: {memory_gb:.1f}GB –ø–∞–º—è—Ç–∏")
        
        # –≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if memory_gb < 6:
            recommended_batch = 256
            print("  üì¶ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π batch_size: 256 (–º–∞–ª–∞—è GPU)")
        elif memory_gb < 12:
            recommended_batch = 512
            print("  üì¶ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π batch_size: 512 (—Å—Ä–µ–¥–Ω—è—è GPU)")
        elif memory_gb < 24:
            recommended_batch = 1024
            print("  üì¶ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π batch_size: 1024 (–±–æ–ª—å—à–∞—è GPU)")
        else:
            recommended_batch = 2048
            print("  üì¶ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π batch_size: 2048 (–æ—á–µ–Ω—å –±–æ–ª—å—à–∞—è GPU)")
        
        print(f"  üéØ –î–ª—è –≤–∞—à–µ–π GPU –ø–æ–ø—Ä–æ–±—É–π—Ç–µ: --agent.batch_size={recommended_batch}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "monitor":
            monitor_training()
        elif command == "analyze":
            log_file = sys.argv[2] if len(sys.argv) > 2 else "gpu_monitor.log"
            analyze_gpu_log(log_file)
        elif command == "batch":
            get_optimal_batch_size()
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    else:
        print("üñ•Ô∏è  GPU Monitor –¥–ª—è FQL")
        print("=" * 30)
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python monitor_gpu.py monitor     - –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        print("  python monitor_gpu.py analyze     - –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∞")
        print("  python monitor_gpu.py batch       - –ü–æ–¥–±–æ—Ä batch_size")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GPU
        gpu_info = get_gpu_info()
        if gpu_info:
            print("üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GPU:")
            for gpu in gpu_info:
                memory_percent = (gpu['memory_used'] / gpu['memory_total']) * 100
                print(f"  GPU {gpu['gpu_id']}: {gpu['utilization']}% util, "
                      f"{memory_percent:.1f}% mem, {gpu['temperature']}¬∞C")
        else:
            print("‚ùå NVIDIA GPU –Ω–µ –Ω–∞–π–¥–µ–Ω–∞") 