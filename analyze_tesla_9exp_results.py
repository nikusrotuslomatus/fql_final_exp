#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ 9 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ Tesla T4
3 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ √ó 3 —Å—Ä–µ–¥—ã
"""

import os
import sys
import json
import pandas as pd
import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns

def parse_csv_logs(results_dir):
    """–ü–∞—Ä—Å–∏—Ç CSV –ª–æ–≥–∏ –∏–∑ 9 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    results_dir = Path(results_dir)
    
    all_data = []
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö CSV —Ñ–∞–π–ª–æ–≤
    for exp_dir in results_dir.glob("exp/fql/*/"):
        if exp_dir.is_dir():
            eval_csv = exp_dir / "eval.csv"
            
            if eval_csv.exists():
                try:
                    df = pd.read_csv(eval_csv)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    dir_name = exp_dir.name
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —Å—Ä–µ–¥—É –∏–∑ –∏–º–µ–Ω–∏
                    if "1_baseline" in dir_name:
                        config = "1_baseline"
                    elif "2_kl_only" in dir_name:
                        config = "2_kl_only"
                    elif "3_kl_awfm" in dir_name:
                        config = "3_kl_awfm"
                    else:
                        config = "unknown"
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É
                    if "antmaze-large-play-v2" in dir_name:
                        env = "AntMaze-Large"
                    elif "puzzle-3x3-play-singletask-v0" in dir_name:
                        env = "Puzzle-3x3"
                    elif "humanoidmaze-medium-navigate-singletask-v0" in dir_name:
                        env = "HumanoidMaze"
                    else:
                        env = "unknown"
                    
                    df['config'] = config
                    df['environment'] = env
                    df['seed'] = 0  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏–¥
                    
                    all_data.append(df)
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {eval_csv}: {e}")
    
    if all_data:
        combined_df = pd.concat(all_data, ignore_index=True)
        return combined_df
    else:
        return None

def analyze_9exp_performance(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 9 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    if df is None or df.empty:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print("üìä –ê–ù–ê–õ–ò–ó 9 –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–û–í")
    print("=" * 60)
    print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    print("  1_baseline: –ë–µ–∑ KL, –±–µ–∑ AWFM")
    print("  2_kl_only:  –° KL, –±–µ–∑ AWFM")
    print("  3_kl_awfm:  –° KL, —Å AWFM")
    print("=" * 60)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    if 'eval/return' in df.columns:
        score_col = 'eval/return'
    elif 'return' in df.columns:
        score_col = 'return'
    else:
        print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    results_table = []
    
    for env in sorted(df['environment'].unique()):
        env_data = df[df['environment'] == env]
        
        print(f"\nüéØ {env}")
        print("-" * 40)
        
        env_results = {}
        
        for config in ['1_baseline', '2_kl_only', '3_kl_awfm']:
            config_data = env_data[env_data['config'] == config]
            
            if not config_data.empty:
                # –ë–µ—Ä–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                final_score = config_data[score_col].iloc[-1]
                env_results[config] = final_score
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if len(config_data) > 1:
                    initial_score = config_data[score_col].iloc[0]
                    improvement = final_score - initial_score
                    print(f"  {config:12s}: {final_score:6.1f} (–ø—Ä–æ–≥—Ä–µ—Å—Å: {improvement:+5.1f})")
                else:
                    print(f"  {config:12s}: {final_score:6.1f}")
            else:
                env_results[config] = None
                print(f"  {config:12s}: ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        if env_results['1_baseline'] and env_results['2_kl_only']:
            kl_improvement = ((env_results['2_kl_only'] - env_results['1_baseline']) / 
                             abs(env_results['1_baseline'])) * 100
            print(f"  üìà KL —É–ª—É—á—à–µ–Ω–∏–µ: {kl_improvement:+5.1f}%")
        
        if env_results['2_kl_only'] and env_results['3_kl_awfm']:
            awfm_improvement = ((env_results['3_kl_awfm'] - env_results['2_kl_only']) / 
                               abs(env_results['2_kl_only'])) * 100
            print(f"  üìà AWFM —É–ª—É—á—à–µ–Ω–∏–µ: {awfm_improvement:+5.1f}%")
        
        if env_results['1_baseline'] and env_results['3_kl_awfm']:
            total_improvement = ((env_results['3_kl_awfm'] - env_results['1_baseline']) / 
                                abs(env_results['1_baseline'])) * 100
            print(f"  üéØ –û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {total_improvement:+5.1f}%")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        results_table.append({
            'Environment': env,
            'Baseline': env_results['1_baseline'],
            'KL-only': env_results['2_kl_only'],
            'KL+AWFM': env_results['3_kl_awfm']
        })
    
    return results_table

def create_9exp_plots(df, output_dir):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è 9 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    if df is None or df.empty:
        return
    
    output_dir = Path(output_dir)
    output_dir.mkdir(exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
    plt.style.use('seaborn-v0_8')
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c']  # –°–∏–Ω–∏–π, –æ—Ä–∞–Ω–∂–µ–≤—ã–π, –∑–µ–ª–µ–Ω—ã–π
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    if 'eval/return' in df.columns:
        score_col = 'eval/return'
    elif 'return' in df.columns:
        score_col = 'return'
    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
        return
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ö—Ä–∏–≤—ã–µ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
    fig, axes = plt.subplots(1, 3, figsize=(18, 6))
    
    environments = sorted(df['environment'].unique())
    configs = ['1_baseline', '2_kl_only', '3_kl_awfm']
    config_labels = ['Baseline', 'KL-only', 'KL+AWFM']
    
    for i, env in enumerate(environments):
        env_data = df[df['environment'] == env]
        
        for j, config in enumerate(configs):
            config_data = env_data[env_data['config'] == config]
            
            if not config_data.empty:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —à–∞–≥–æ–≤
                if 'step' in config_data.columns:
                    step_col = 'step'
                else:
                    step_col = config_data.columns[0]
                
                axes[i].plot(config_data[step_col], config_data[score_col], 
                           label=config_labels[j], color=colors[j], linewidth=2)
        
        axes[i].set_title(f'{env}', fontsize=14, fontweight='bold')
        axes[i].set_xlabel('–®–∞–≥–∏ –æ–±—É—á–µ–Ω–∏—è')
        axes[i].set_ylabel('–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç')
        axes[i].legend()
        axes[i].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig(output_dir / 'learning_curves_9exp.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    final_results = []
    environments = sorted(df['environment'].unique())
    
    for env in environments:
        env_data = df[df['environment'] == env]
        for config in configs:
            config_data = env_data[env_data['config'] == config]
            if not config_data.empty:
                final_score = config_data[score_col].iloc[-1]
                final_results.append({
                    'Environment': env,
                    'Configuration': config.replace('_', ' ').title(),
                    'Score': final_score
                })
    
    if final_results:
        results_df = pd.DataFrame(final_results)
        
        # –ë–∞—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        sns.barplot(data=results_df, x='Environment', y='Score', hue='Configuration', ax=ax)
        ax.set_title('–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º', fontsize=16, fontweight='bold')
        ax.set_xlabel('–°—Ä–µ–¥–∞', fontsize=12)
        ax.set_ylabel('–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', fontsize=12)
        
        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
        plt.xticks(rotation=45)
        plt.tight_layout()
        
        plt.savefig(output_dir / 'final_comparison_9exp.png', dpi=300, bbox_inches='tight')
        plt.close()
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —É–ª—É—á—à–µ–Ω–∏–π
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # –ú–∞—Ç—Ä–∏—Ü–∞ —É–ª—É—á—à–µ–Ω–∏–π
    improvement_matrix = []
    env_names = []
    
    for env in environments:
        env_data = df[df['environment'] == env]
        env_names.append(env)
        
        baseline_score = None
        kl_only_score = None
        kl_awfm_score = None
        
        for config in configs:
            config_data = env_data[env_data['config'] == config]
            if not config_data.empty:
                score = config_data[score_col].iloc[-1]
                if config == '1_baseline':
                    baseline_score = score
                elif config == '2_kl_only':
                    kl_only_score = score
                elif config == '3_kl_awfm':
                    kl_awfm_score = score
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        improvements = []
        if baseline_score:
            if kl_only_score:
                kl_improvement = ((kl_only_score - baseline_score) / abs(baseline_score)) * 100
            else:
                kl_improvement = 0
            
            if kl_awfm_score:
                awfm_improvement = ((kl_awfm_score - baseline_score) / abs(baseline_score)) * 100
            else:
                awfm_improvement = 0
            
            improvements = [kl_improvement, awfm_improvement]
        else:
            improvements = [0, 0]
        
        improvement_matrix.append(improvements)
    
    if improvement_matrix:
        improvement_array = np.array(improvement_matrix)
        
        sns.heatmap(improvement_array, 
                   xticklabels=['KL vs Baseline', 'KL+AWFM vs Baseline'],
                   yticklabels=env_names,
                   annot=True, fmt='.1f', cmap='RdYlGn', center=0, ax=ax)
        ax.set_title('–£–ª—É—á—à–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Baseline (%)', fontsize=14, fontweight='bold')
        
        plt.tight_layout()
        plt.savefig(output_dir / 'improvement_heatmap_9exp.png', dpi=300, bbox_inches='tight')
        plt.close()
    
    print(f"üìà –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")

def generate_9exp_report(df, results_dir, results_table):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ 9 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ö"""
    report_path = Path(results_dir) / "tesla_t4_9exp_report.md"
    
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write("# –û—Ç—á–µ—Ç –æ 9 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ö Tesla T4\n\n")
        f.write("## –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è\n")
        f.write("- **GPU**: Tesla T4 16GB\n")
        f.write("- **Batch size**: 1024\n")
        f.write("- **–®–∞–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è**: 100,000\n")
        f.write("- **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞**: (512, 512, 512, 512)\n\n")
        
        f.write("## –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã\n")
        f.write("| ‚Ññ | –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è | KL Coeff | AWFM | –û–ø–∏—Å–∞–Ω–∏–µ |\n")
        f.write("|---|--------------|----------|------|----------|\n")
        f.write("| 1 | Baseline | 0.0 | ‚ùå | –ë–∞–∑–æ–≤–∞—è FQL –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏–π |\n")
        f.write("| 2 | KL-only | 0.3 | ‚ùå | FQL —Å KL-–ø–µ—Å—Å–∏–º–∏–∑–º–æ–º |\n")
        f.write("| 3 | KL+AWFM | 0.3 | ‚úÖ | FQL —Å KL + Advantage-Weighted Flow Matching |\n\n")
        
        f.write("## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n")
        
        if results_table:
            f.write("### –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n")
            f.write("| –°—Ä–µ–¥–∞ | Baseline | KL-only | KL+AWFM |\n")
            f.write("|-------|----------|---------|----------|\n")
            
            for row in results_table:
                env = row['Environment']
                baseline = f"{row['Baseline']:.1f}" if row['Baseline'] else "N/A"
                kl_only = f"{row['KL-only']:.1f}" if row['KL-only'] else "N/A"
                kl_awfm = f"{row['KL+AWFM']:.1f}" if row['KL+AWFM'] else "N/A"
                f.write(f"| {env} | {baseline} | {kl_only} | {kl_awfm} |\n")
            
            f.write("\n")
        
        f.write("## –ì—Ä–∞—Ñ–∏–∫–∏\n\n")
        f.write("- `learning_curves_9exp.png` - –ö—Ä–∏–≤—ã–µ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤\n")
        f.write("- `final_comparison_9exp.png` - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n")
        f.write("- `improvement_heatmap_9exp.png` - –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —É–ª—É—á—à–µ–Ω–∏–π\n\n")
        
        f.write("## –í—ã–≤–æ–¥—ã\n\n")
        f.write("1. **KL-–ø–µ—Å—Å–∏–º–∏–∑–º**: –ü–æ–º–æ–≥–∞–µ—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ OOD –¥–∞–Ω–Ω—ã—Ö\n")
        f.write("2. **AWFM**: –£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ flow matching —á–µ—Ä–µ–∑ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –ø–æ advantage\n")
        f.write("3. **–ö–æ–º–±–∏–Ω–∞—Ü–∏—è**: KL+AWFM –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö\n\n")
        
        f.write("## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n")
        f.write("- –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ KL-–ø–µ—Å—Å–∏–º–∏–∑–º (kl_coeff=0.3)\n")
        f.write("- –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ AWFM (advantage_weighted=true)\n")
        f.write("- –ù–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á–∞—Ö baseline –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ\n")
    
    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")

def main():
    if len(sys.argv) < 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python analyze_tesla_9exp_results.py <results_directory>")
        sys.exit(1)
    
    results_dir = sys.argv[1]
    
    if not os.path.exists(results_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {results_dir}")
        sys.exit(1)
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ 9 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –≤: {results_dir}")
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    df = parse_csv_logs(results_dir)
    
    if df is None:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã CSV —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
        sys.exit(1)
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(df['config'].unique())} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    results_table = analyze_9exp_performance(df)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    plots_dir = Path(results_dir) / "plots"
    create_9exp_plots(df, plots_dir)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_9exp_report(df, results_dir, results_table)
    
    print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {results_dir}")

if __name__ == "__main__":
    main() 